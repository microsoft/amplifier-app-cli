"""API key management for Amplifier."""

import os
from pathlib import Path


class KeyManager:
    """Manage API keys in ~/.amplifier/keys.env file."""

    def __init__(self):
        self.keys_file = Path.home() / ".amplifier" / "keys.env"
        self._load_keys()

    def _load_keys(self):
        """Load keys from file into environment if they exist."""
        if not self.keys_file.exists():
            return

        try:
            with open(self.keys_file) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        # Only set if not already in environment
                        if key not in os.environ:
                            os.environ[key] = value.strip('"').strip("'")
        except Exception:
            # Fail silently - manual env vars will still work
            pass

    def has_key(self, key_name: str) -> bool:
        """Check if API key exists (in env or file)."""
        return key_name in os.environ

    def save_key(self, key_name: str, key_value: str) -> None:
        """Save API key to keys.env file securely."""
        self.keys_file.parent.mkdir(parents=True, exist_ok=True)

        # Read existing keys
        existing_keys = {}
        if self.keys_file.exists():
            with open(self.keys_file) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        k, v = line.split("=", 1)
                        existing_keys[k] = v

        # Update with new key
        existing_keys[key_name] = f'"{key_value}"'

        # Write back
        with open(self.keys_file, "w") as f:
            f.write("# Amplifier API Keys\n")
            f.write("# Auto-generated by amplifier setup\n")
            f.write("# These are loaded automatically on startup\n\n")
            for k, v in existing_keys.items():
                f.write(f"{k}={v}\n")

        # Set secure permissions (owner read/write only)
        self.keys_file.chmod(0o600)

        # Also set in current environment
        os.environ[key_name] = key_value

    def get_configured_provider(self) -> str | None:
        """Determine which provider is configured based on available keys."""
        if self.has_key("ANTHROPIC_API_KEY"):
            return "anthropic"
        if self.has_key("OPENAI_API_KEY"):
            return "openai"
        if self.has_key("AZURE_OPENAI_API_KEY") and self.has_key("AZURE_OPENAI_ENDPOINT"):
            return "azure"
        return None
